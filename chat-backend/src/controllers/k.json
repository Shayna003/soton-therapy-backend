Context {
  app: Application {
  "#middleware": [
    [AsyncFunction (anonymous)],
    [AsyncFunction (anonymous)],
    [Function: dispatch] {
      router: Router {
  "#params": {},
  "#stack": [
    Layer {
  methods: [ "HEAD", "GET" ],
  middleware: [ [Function (anonymous)] ],
  options: {
    end: undefined,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: undefined
  },
  paramNames: [],
  path: "/",
  regexp: /^\/[\/#\?]?$/i
},
    Layer {
  methods: [ "POST" ],
  middleware: [ [AsyncFunction: signUp] ],
  options: {
    end: undefined,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: undefined
  },
  paramNames: [],
  path: "/api/authentication/signup",
  regexp: /^\/api\/authentication\/signup[\/#\?]?$/i
},
    Layer {
  methods: [ "POST" ],
  middleware: [ [AsyncFunction: signIn] ],
  options: {
    end: undefined,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: undefined
  },
  paramNames: [],
  path: "/api/authentication/signin",
  regexp: /^\/api\/authentication\/signin[\/#\?]?$/i
},
    Layer {
  methods: [ "HEAD", "HEAD", "GET" ],
  middleware: [ [AsyncFunction: verifyJWT], [AsyncFunction: fetchUserInfo] ],
  options: {
    end: undefined,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: undefined
  },
  paramNames: [],
  path: "/api/authentication/fetchuserinfo",
  regexp: /^\/api\/authentication\/fetchuserinfo[\/#\?]?$/i
},
    Layer {
  methods: [ "POST" ],
  middleware: [ [AsyncFunction: signOut] ],
  options: {
    end: undefined,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: undefined
  },
  paramNames: [],
  path: "/api/authentication/signout",
  regexp: /^\/api\/authentication\/signout[\/#\?]?$/i
},
    Layer {
  methods: [],
  middleware: [ [AsyncFunction: allowedMethods] ],
  options: {
    end: false,
    sensitive: undefined,
    strict: undefined,
    ignoreCaptures: false
  },
  paramNames: [],
  path: "/api/authentication",
  regexp: /^\/api\/authentication(?:[\/#\?](?=[]|$))?(?=[\/#\?]|[]|$)/i
}
  ]
}
    },
    [AsyncFunction: allowedMethods]
  ],
  keys: undefined,
  proxy: false,
  state: {}
},
  cookies: SecureCookieMap [],
  isUpgradable: false,
  respond: true,
  request: Request {
  body: Body { has: true, used: false },
  hasBody: true,
  headers: Headers {
    accept: "*/*",
    "accept-encoding": "gzip, deflate, br",
    connection: "keep-alive",
    "content-length": "49",
    "content-type": "application/json",
    host: "localhost:3000",
    "postman-token": "ae695a20-c398-4281-a46d-8712d2c951a1",
    "user-agent": "PostmanRuntime/7.43.0"
  },
  ip: "127.0.0.1",
  ips: [],
  method: "POST",
  secure: false,
  url: "http://localhost:3000/api/authentication/signup",
  userAgent: UserAgent {
  browser: { name: undefined, version: undefined, major: undefined },
  cpu: { architecture: undefined },
  device: { model: undefined, type: undefined, vendor: undefined },
  engine: { name: undefined, version: undefined },
  os: { name: undefined, version: undefined },
  ua: "PostmanRuntime/7.43.0"
}
},
  response: Response {
  body: undefined,
  headers: Headers {
    "access-control-allow-credentials": "true",
    "access-control-allow-origin": "http://localhost:5173"
  },
  status: 404,
  type: undefined,
  writable: true
},
  socket: undefined,
  state: {}
}